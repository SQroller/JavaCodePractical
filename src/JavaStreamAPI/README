1. Практическое задание - Stream API - генерация чисел

Предположим, у нас есть список заказов, и каждый заказ представляет собой продукт и его стоимость. Задача состоит в использовании Stream API и коллекторов для решения следующих задач:

Создайте список заказов с разными продуктами и их стоимостями.
Группируйте заказы по продуктам.
Для каждого продукта найдите общую стоимость всех заказов.
Отсортируйте продукты по убыванию общей стоимости.
Выберите три самых дорогих продукта.
Выведите результат: список трех самых дорогих продуктов и их общая стоимость.

Решение: Order, StreamCollectorsExample.

2. Практическое задачние - Stream API - агрегация и объединение результатов

Создайте коллекцию студентов, где каждый студент содержит информацию о предметах, которые он изучает, и его оценках по этим предметам.
Используйте Parallel Stream для обработки данных и создания Map, где ключ - предмет, а значение - средняя оценка по всем студентам.
Выведите результат: общую Map с средними оценками по всем предметам.

Решение: Student, ParallelStreamCollectMapAdvancedExample .

3. Практическое задание - Stream API - ForkJoinPool: Рекурсивное вычисление факториала

Рассмотрим задачу вычисления факториала числа с использованием ForkJoinPool. Факториал числа n обозначается как n! и вычисляется как произведение всех положительных целых чисел от 1 до n.

Реализуйте класс FactorialTask, который расширяет RecursiveTask. Этот класс будет выполнять рекурсивное вычисление факториала числа.
В конструкторе FactorialTask передайте число n, факториал которого нужно вычислить.
В методе compute() разбейте задачу на подзадачи и используйте fork() для их асинхронного выполнения.
Используйте join() для получения результатов подзадач и комбинирования их для получения общего результата.
В основном методе создайте экземпляр FactorialTask с числом, для которого нужно вычислить факториал, и запустите его в ForkJoinPool.
Выведите результат вычисления факториала.

Решение: FactorialTask, ForkJoinPoolExample .
